{"ast":null,"code":"var _jsxFileName = \"C:\\\\NBAD\\\\G\\\\G1\\\\src\\\\components\\\\Auth\\\\AccountCreation.js\";\n// AccountCreation.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport UserRegistration from './AccountCreation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\njest.mock('../services/authService', () => ({\n  userRegistration: jest.fn()\n}));\ndescribe('UserRegistration component', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n  test('renders signup form', () => {\n    render( /*#__PURE__*/_jsxDEV(UserRegistration, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this));\n    const signUpHeading = screen.getByRole('heading', {\n      name: 'Customer Registration'\n    });\n    const fullNameInput = screen.getByLabelText('Display Name:');\n    const usernameInput = screen.getByLabelText('User ID:');\n    const passwordInput = screen.getByLabelText('Secure Password:');\n    const signUpButton = screen.getByRole('button', {\n      name: 'Register'\n    });\n    expect(signUpHeading).toBeInTheDocument();\n    expect(fullNameInput).toBeInTheDocument();\n    expect(usernameInput).toBeInTheDocument();\n    expect(passwordInput).toBeInTheDocument();\n    expect(signUpButton).toBeInTheDocument();\n  });\n  test('handles signup and displays success message', async () => {\n    const mockUserRegistration = jest.fn();\n    mockUserRegistration.mockResolvedValue('Success');\n    require('../services/authService').userRegistration = mockUserRegistration;\n    render( /*#__PURE__*/_jsxDEV(UserRegistration, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this));\n    userEvent.type(screen.getByLabelText('Display Name:'), 'John Doe');\n    userEvent.type(screen.getByLabelText('User ID:'), 'johndoe');\n    userEvent.type(screen.getByLabelText('Secure Password:'), 'password123');\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Register'\n    }));\n    await waitFor(() => {\n      expect(screen.getByText('Signup successful!')).toBeInTheDocument();\n    });\n  });\n  test('handles signup failure and displays error message', async () => {\n    const mockUserRegistration = jest.fn();\n    mockUserRegistration.mockRejectedValue(new Error('Registration failed'));\n    require('../services/authService').userRegistration = mockUserRegistration;\n    render( /*#__PURE__*/_jsxDEV(UserRegistration, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this));\n    userEvent.type(screen.getByLabelText('Display Name:'), 'John Doe');\n    userEvent.type(screen.getByLabelText('User ID:'), 'johndoe');\n    userEvent.type(screen.getByLabelText('Secure Password:'), 'invalidpassword');\n    fireEvent.click(screen.getByRole('button', {\n      name: 'Register'\n    }));\n    await waitFor(() => {\n      expect(screen.getByText('Sorry, Signup Failed. Please Give It Another Try')).toBeInTheDocument();\n    });\n  });\n});","map":{"version":3,"names":["React","render","fireEvent","waitFor","screen","userEvent","UserRegistration","jsxDEV","_jsxDEV","jest","mock","userRegistration","fn","describe","afterEach","clearAllMocks","test","fileName","_jsxFileName","lineNumber","columnNumber","signUpHeading","getByRole","name","fullNameInput","getByLabelText","usernameInput","passwordInput","signUpButton","expect","toBeInTheDocument","mockUserRegistration","mockResolvedValue","require","type","click","getByText","mockRejectedValue","Error"],"sources":["C:/NBAD/G/G1/src/components/Auth/AccountCreation.js"],"sourcesContent":["// AccountCreation.test.js\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport UserRegistration from './AccountCreation'; \r\n\r\njest.mock('../services/authService', () => ({\r\n  userRegistration: jest.fn(),\r\n}));\r\n\r\ndescribe('UserRegistration component', () => {\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('renders signup form', () => {\r\n    render(<UserRegistration />);\r\n    const signUpHeading = screen.getByRole('heading', { name: 'Customer Registration' });\r\n    const fullNameInput = screen.getByLabelText('Display Name:');\r\n    const usernameInput = screen.getByLabelText('User ID:');\r\n    const passwordInput = screen.getByLabelText('Secure Password:');\r\n    const signUpButton = screen.getByRole('button', { name: 'Register' });\r\n\r\n    expect(signUpHeading).toBeInTheDocument();\r\n    expect(fullNameInput).toBeInTheDocument();\r\n    expect(usernameInput).toBeInTheDocument();\r\n    expect(passwordInput).toBeInTheDocument();\r\n    expect(signUpButton).toBeInTheDocument();\r\n  });\r\n\r\n  test('handles signup and displays success message', async () => {\r\n    const mockUserRegistration = jest.fn();\r\n    mockUserRegistration.mockResolvedValue('Success');\r\n    require('../services/authService').userRegistration = mockUserRegistration;\r\n\r\n    render(<UserRegistration />);\r\n    userEvent.type(screen.getByLabelText('Display Name:'), 'John Doe');\r\n    userEvent.type(screen.getByLabelText('User ID:'), 'johndoe');\r\n    userEvent.type(screen.getByLabelText('Secure Password:'), 'password123');\r\n    fireEvent.click(screen.getByRole('button', { name: 'Register' }));\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Signup successful!')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  test('handles signup failure and displays error message', async () => {\r\n    const mockUserRegistration = jest.fn();\r\n    mockUserRegistration.mockRejectedValue(new Error('Registration failed'));\r\n    require('../services/authService').userRegistration = mockUserRegistration;\r\n\r\n    render(<UserRegistration />);\r\n    userEvent.type(screen.getByLabelText('Display Name:'), 'John Doe');\r\n    userEvent.type(screen.getByLabelText('User ID:'), 'johndoe');\r\n    userEvent.type(screen.getByLabelText('Secure Password:'), 'invalidpassword');\r\n    fireEvent.click(screen.getByRole('button', { name: 'Register' }));\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Sorry, Signup Failed. Please Give It Another Try')).toBeInTheDocument();\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}